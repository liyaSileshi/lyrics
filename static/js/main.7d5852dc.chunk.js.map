{"version":3,"sources":["spotify.js","utils/prefixtreenode.js","utils/prefixtree.js","components/Autocomplete.js","components/Correct.js","components/Incorrect.js","components/Guess.js","components/Loading.js","components/Error.js","components/lyrics.js","App.js","serviceWorker.js","index.js"],"names":["song_artist","data","map","song","artist","artist_set","Set","uniqueArtists","Array","from","artistObject","reduce","obj","toLowerCase","console","log","undefined","treeNode","character","this","children","terminal","Object","keys","length","hasChild","ReferenceError","childNode","Trie","strings","root","size","forEach","string","insert","findNode","node","isTerminal","ch","getChild","newNode","addChild","depth","string_arr","prefix","completions","push","traverse","all_strings","list","numChildren","tree","Autocomplete","props","guessArtist","complete","name","className","onClick","updateGuess","Correct","class","Incorrect","Guess","updateText","text","setState","state","lyricsData","gameStatus","e","preventDefault","onSubmit","handleGuessLogic","value","onChange","target","type","placeholder","displayWinLose","Component","Loading","Error","Lyrics","isLoading","url","fetch","res","json","message","Math","floor","random","title","getRandomSinger","process","getLyricData","header","status_code","lines","body","lyrics","lyrics_body","split","splice","filter","line","slice","lyric","renderLyrics","handleSubmit","checkRender","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7d5852dc.chunk.js","sourcesContent":["import data from './spotify.json'\n\n\nconst song_artist = data.map((song) => {\n  return song.artist\n})\n\nconst artist_set = new Set(song_artist) //    gives only unique artists\n\nconst uniqueArtists = Array.from(artist_set) //converts unique artist to Array\n\n//object containing keys as artist in lowercase and value = original case\nconst artistObject = uniqueArtists.reduce((obj, artist) => {\n  obj[artist.toLowerCase()] = artist\n  return obj\n}, {})\nconsole.log(artistObject)\n\n\n// Make an Object whose keys are the names of\n// categories and whose values are the number of times that\n// category appears in the data.\nconst artistWithCount = data.reduce((obj, song) => {\n  // check if cat exists as a key in an object\n  if (obj[song[\"top genre\"]] !== undefined){\n      //if so add\n      obj[song[\"top genre\"]] += 1\n  }else{\n      // set this key with a value of 1\n      obj[song[\"top genre\"]] = 1\n  }\n  return obj\n  }\n  ,{})  //initial value of object is {}\n\n\n\n\n// randomly choose a singer and a song\nconst getRandomSinger = () => {\n  const song = data[Math.floor(Math.random() *data.length)]\n  return [song.title, song.artist]\n}\n\n\nexport default data\nexport {song_artist, getRandomSinger, uniqueArtists, artistObject}\n","class treeNode{\n  constructor(character=null) {\n    this.character = character\n    this.children = {}\n    this.terminal = false\n  }\n\n  isTerminal(){\n    //Return True if this prefix tree node terminates a string\n    return this.terminal\n  }\n\n  numChildren(){\n    //Return the number of children nodes this prefix tree node has\n    //Determine how many children this node has\n    let size = Object.keys(this.children).length;\n    return size\n  }\n\n  hasChild(character){\n    ///Return True if this prefix tree node has a child node that\n    ///represents the given character amongst its children.\"\"\"\n    ///Check if given character is amongst this node's children\n    return character in this.children\n  }\n\n  getChild(character){\n    //Return this prefix tree node's child node that represents the given\n    //character if it is amongst its children\n    if (this.hasChild(character)){\n      //Find child node for given character in this node's children\n      return this.children[character]\n    } \n    throw ReferenceError\n  }\n\n  addChild(character, childNode){\n  //Add the given character and child node as a child of this node, or\n  //raise ValueError if given character is amongst this node's children\n    if (!(this.hasChild(character))){\n        //Add given character and child node to this node's children\n        this.children[character] = childNode\n    }else{\n        // throw ValueError(f'Child exists for character {character!r}')\n        throw ReferenceError\n    }\n  }\n}\n\nexport default treeNode;","import treeNode from './prefixtreenode'\n\nclass Trie {\n  constructor(strings= null){\n    //Create a new root node with the empty character\n    this.root = new treeNode('')\n    //Count the number of strings inserted into the tree\n    this.size = 0\n    //Insert each string, if any were given\n    if (strings !== null) {\n      strings.forEach(string => {\n        this.insert(string)\n      });\n    }\n  }\n\n  /* Return True if this prefix tree is empty (contains no strings) */\n  isEmpty() {\n    return this.size === 0\n  }\n\n  /*Return True if this prefix tree contains the given string.*/\n  contains(string) {\n    //find node of string\n    const [node, depth] = this.findNode(string)\n    //if depth equals length of return true\n    if (depth === string.length && node.isTerminal()){\n      return true\n    }\n    return false\n  }\n\n  /* Insert the given string into this prefix tree. */\n  insert(string) {\n    let node = this.root;\n    //convert string into array to loop over character\n    [...string].forEach(ch => {\n      ch = ch.toLowerCase()\n      if (node.hasChild(ch)) {\n        node = node.getChild(ch)\n      }\n      else{\n        //create a new ch node\n        let newNode = new treeNode(ch)\n        node.addChild(ch, newNode)\n        //reassign node\n        node = newNode\n      }\n    })\n    //check if new str was inserted\n    if (!node.isTerminal()){\n      this.size += 1;\n      node.terminal = true;\n    }\n    console.log('insert')\n  }\n\n  /* Return a pair containing the deepest node in this prefix tree that\n  matches the longest prefix of the given string and the node's depth.\n  The depth returned is equal to the number of prefix characters matched.\n  Search is done iteratively with a loop starting from the root node */\n  findNode(string) {\n    if(string.length === 0) {\n      return [this.root, 0]\n    }\n    //start with the root node\n    let depth = 0\n    let node = this.root\n    //loop through the string\n    let string_arr = [...string]\n    for (let ch = 0; ch < string_arr.length; ch++) {\n      if (node.hasChild(string_arr[ch])){\n        node = node.getChild(string_arr[ch])\n        depth += 1\n      }\n      else{\n        console.log('no child')\n        return [null, depth]\n      }\n    }\n    return [node, depth]\n  }\n\n  /* Return a list of all strings stored in this prefix tree that start\n    with the given prefix string. */\n  complete(prefix){\n    let completions = []\n    // find node of prefix\n    let node = this.findNode(prefix)[0]\n    // console.log(node)\n    // check if node is found\n    if (node === null) {\n      return [] //empty arr\n    }\n    // check if node is terminal\n    if (node.isTerminal()) {\n      completions.push(prefix)\n    }\n    // for each ch \n    Object.keys(node.children).forEach(ch => {\n      let childNode = node.getChild(ch)\n      this.traverse(childNode, prefix+ch, completions)\n    });\n    return completions\n  }\n\n  /* Return a list of all strings stored in this prefix tree */\n  strings() {\n    let all_strings = []\n    let node = this.root\n    // for each ch \n    Object.keys(node.children).forEach(ch => {\n      let childNode = node.getChild(ch)\n      this.traverse(childNode, ch, all_strings)\n    });\n    return all_strings\n  }\n\n  /* Traverse this prefix tree with recursive depth-first traversal.\n  Start at the given node with the given prefix representing its path in\n  this prefix tree and visit each node with the given visit function. */\n  traverse(node, prefix, list) {\n    if (node.isTerminal()) {\n      list.push(prefix) //append prefix\n\n    }\n    if (node.numChildren() > 0) {\n      Object.keys(node.children).forEach(ch => {\n        let childNode = node.getChild(ch)\n        this.traverse(childNode, prefix + ch, list)\n      });\n    }\n  }\n\n}\n\nexport default Trie;","import React from 'react';\nimport Trie from '../utils/prefixtree';\nimport {uniqueArtists, artistObject} from '../spotify';\nimport './Autocomplete.css'\n\n\nlet tree = new Trie(uniqueArtists)\n\nfunction Autocomplete (props) {\n    if (props.guessArtist.length > 0) {\n        console.log(props.guessArtist)\n        console.log(tree.strings())\n        return tree.complete(props.guessArtist.toLowerCase()).map((name) => {\n            return <div className = 'artist' onClick = {() => {\n                props.updateGuess(artistObject[name])\n                console.log(artistObject[name])\n            }}>{artistObject[name]}</div>\n          })\n    }\n   else return ''\n}\n\nexport default Autocomplete;\n","import React from 'react'\nimport './Correct.css'\nfunction Correct() {\n    return (\n        <div className = 'correct'> \n            <h3> <i class=\"fas fa-check\"></i> Yay! That's correct! <i class=\"fas fa-check\"></i></h3>\n            <p><i class=\"far fa-smile\"></i> </p>\n        </div>\n    )\n}\n\nexport default Correct;","import React from 'react'\nimport './Incorrect.css'\nfunction Incorrect() {\n    return (\n        <div className = 'incorrect'> \n            <h3> <i class=\"fas fa-times\"></i> Incorrect <i class=\"fas fa-times\"></i></h3>\n            <p>Please try again <i class=\"far fa-smile\"></i> </p>\n        </div>\n    )\n}\n\nexport default Incorrect;","// <Guess  artist =  />\nimport React, {Component} from 'react';\nimport Autocomplete from './Autocomplete'\nimport './Guess.css'\nimport Correct from './Correct'\nimport Incorrect from './Incorrect'\n\nclass Guess extends Component{\n  constructor(props) {\n      super(props)\n      this.state = {lyricsData : null,\n                    guessArtist: '',\n                    gameStatus : ''\n                    }\n  }\n\n  handleGuessLogic(e) {\n    e.preventDefault();\n\n    if (this.state.guessArtist.toLowerCase() === this.props.artist.toLowerCase()) {\n      this.setState({gameStatus : 'correct'})\n      console.log('woo hoo')\n    } else {\n      console.log('better luck next time')\n      this.setState({gameStatus : 'incorrect'})\n    }\n  }\n  \n  displayWinLose() {\n    if (this.state.gameStatus === 'correct') {\n      return <Correct />\n    }\n    else if (this.state.gameStatus === 'incorrect') {\n      return <Incorrect />\n    }\n  }\n  //when an auto complete option is clicked, add it as input\n  updateText = (text) => {this.setState({ guessArtist : text })}\n\n  render() {\n    return (\n      <div>\n      <form className='guess-form' onSubmit={e => this.handleGuessLogic(e)}>\n      <input \n        value={this.state.guessArtist} \n        onChange={e => this.setState({ guessArtist: e.target.value })}\n        type=\"text\" \n        placeholder=\"enter artist\"\n      />\n      <button className='submit-btn' type=\"submit\">Submit Guess</button>\n      </form>\n      <Autocomplete guessArtist = {this.state.guessArtist} updateGuess={this.updateText}/> \n      {this.displayWinLose()}\n    </div>\n    )\n  }\n}\n\nexport default Guess;","import React from 'react'\nimport './Loading.css'\nfunction Loading() {\n    return (\n        <div className = 'loader'> Loading...</div>\n    )\n}\n\nexport default Loading;","import React from 'react'\nimport './Error.css'\nfunction Error() {\n    return (\n        <div className = 'error'> \n            <h3> <i class=\"fas fa-exclamation-triangle\"></i> Error fetching random lyrics <i class=\"fas fa-exclamation-triangle\"></i></h3>\n            <p>Please try generating again <i class=\"far fa-smile\"></i> </p>\n        </div>\n    )\n}\n\nexport default Error;","import React, {Component} from 'react';\nimport {getRandomSinger} from '../spotify'\nimport Guess from './Guess'\nimport Loading from './Loading'\nimport './lyrics.css'\nimport Error from './Error'\n\nclass Lyrics extends Component{\n  constructor(props) {\n      super(props)\n      this.state = {lyricsData : null,\n                    isLoading: false, // to check if data is still being loaded or already loaded\n                    artist: '',\n                    song: ''}\n  }\n    \n  async getLyricData(url) {\n    try{\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n      const res = await fetch(proxyurl + url)\n      const json = await res.json()     \n      this.setState({ lyricsData: json, isLoading: false })\n      \n    } catch(err) {\n        this.setState({ lyricsData: null }) \n        console.log('-- Error fetching --')\n        console.log(err.message)\n        // You may want to display an error to the screen here. \n      }\n  }\n\n  handleSubmit(e) {\n    this.setState({isLoading : true})\n    e.preventDefault();\n    const apikey = process.env.REACT_APP_LYRICS_API_KEY\n    const [title, artist] = getRandomSinger()\n    //set the state of the song to the current randomly selected title and artist\n    this.setState({artist : artist, song : title})\n    console.log(title)\n    console.log(artist)\n    const url = `https://api.musixmatch.com/ws/1.1/matcher.lyrics.get?format=json&callback=callback&q_track=${title}&q_artist=${artist}%20&apikey=${apikey}`\n    // const url = `https://api.musixmatch.com/ws/1.1/matcher.lyrics.get?format=json&callback=callback&q_track=yo&q_artist=u%20&apikey=${apikey}`\n    this.getLyricData(url)\n  }\n\n  renderLyrics() {\n    const lyricsData = this.state.lyricsData\n    if (lyricsData === null) { //\n      // If there is no data return undefined\n      return undefined\n    }\n\n    if (lyricsData.message.header.status_code === 200){ // if json status is valid, show data\n      const {lyrics_body} = lyricsData.message.body.lyrics\n      let lines = lyrics_body.split('\\n')\n      // remove the last 4 elts in the lines array\n      lines.splice(lines.length - 4)\n      // filter out elts with empty strings\n      lines = lines.filter((line) => {\n        return line !== \"\"\n      })\n      // return the first 6 lines of the lyrics\n      const firstSix = lines.slice(0, 6)\n      return firstSix.map((lyric) => {\n        return <p>{lyric}</p>\n      })\n    } else { //invalid json\n      return <Error />\n    }\n  }\n\n  checkRender() {\n    if (this.state.isLoading) { //renders when waiting for json request data\n      return <Loading />\n    } \n    return this.renderLyrics()\n  }\n\n  render() {\n    return (\n      <div className = 'game'>\n        <div className='lyricsGenerate'>\n          <form onSubmit={e => this.handleSubmit(e)}>\n            <button className='submit-btn' type=\"submit\">Generate Lyrics</button>\n          </form>\n          <p>{this.checkRender()}</p>\n        </div>\n        <div className = 'guess'>\n          {/* Guess component */}\n          <Guess artist = {this.state.artist}/>\n        </div>\n      </div> \n    )\n  }\n}\n\nexport default Lyrics;\n","import React from 'react';\nimport data, {song_artist} from './spotify'\nimport './App.css';\nimport './components/lyrics'\nimport Lyrics from './components/lyrics';\nimport Trie from './utils/prefixtree'\nimport './components/Autocomplete'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <header>\n          <h1> Guess the Artist</h1>\n          <p>Can you guess the artist from these lyrics? </p>\n        </header>\n        <Lyrics />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}